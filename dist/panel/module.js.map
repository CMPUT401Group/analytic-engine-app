{"version":3,"sources":["../../src/panel/module.js"],"names":["PanelCtrl","ExampleAppPanelCtrl","$scope","$injector","$http","backendSrv","dashboard","ctrl","console","log","thresholds","getConfig","config","url","jsonData","analyticEngineURL","method","then","successCallback","response","data","map","threshold","pattern","errorCallback","cb","get","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;2BAKFC,mB;;;AAEJ,qCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,UAAtC,EAAkD;AAAA;;AAAA,gJAC1CH,MAD0C,EAClCC,SADkC,EACvBC,KADuB,EAChBC,UADgB;;AAGhD,gBAAKA,UAAL,GAAkBA,UAAlB;AACA,gBAAKC,SAAL,GAAiBJ,OAAOK,IAAP,CAAYD,SAA7B;;AAEAE,kBAAQC,GAAR,CAAY,MAAKH,SAAjB;;AAEAJ,iBAAOQ,UAAP,GAAoB,EAApB;;AAEA,gBAAKC,SAAL,CAAe,kBAAU;AACvBH,oBAAQC,GAAR,CAAYG,MAAZ;AACA,gBAAIC,MAAMD,OAAOE,QAAP,CAAgBC,iBAA1B;AACAX,kBAAM;AACJY,sBAAQ,KADJ;AAEJH,mBAAQA,GAAR;AAFI,aAAN,EAGGI,IAHH,CAGQ,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AACzC;AACA;;AAEA;AACA;AACAjB,qBAAOQ,UAAP,GAAoBS,SAASC,IAAT,CAAcC,GAAd,CAAkB,qBAAa;AACjD,uBAAOC,UAAUC,OAAV,CAAkB,CAAlB,CAAP;AACD,eAFmB,CAApB;AAGD,aAZD,EAYG,SAASC,aAAT,CAAuBL,QAAvB,EAAiC;AAClC;AACA;AACA;AACAX,sBAAQC,GAAR,CAAYU,QAAZ;AACD,aAjBD;AAkBD,WArBD;AAVgD;AAgCjD;;;;oCAESM,E,EAAI;AACZ,iBAAKpB,UAAL,CAAgBqB,GAAhB,CAAoB,0CAApB,EAAgET,IAAhE,CAAqE,UAASL,MAAT,EAAiB;AACpFa,iBAAGb,MAAH;AACD,aAFD;AAGD;;;;QAxC+BZ,S;;AA0ClCC,0BAAoB0B,QAApB,GAA+B,kDAC7B,wEADF;;2BAIE1B,mB","file":"module.js","sourcesContent":["import {PanelCtrl} from  'app/plugins/sdk';\r\n\r\nimport '../css/example-app.css!'\r\nimport '../directives/threshold-patterns';\r\n\r\nclass ExampleAppPanelCtrl extends PanelCtrl {\r\n\r\n  constructor($scope, $injector, $http, backendSrv) {\r\n    super($scope, $injector, $http, backendSrv);\r\n\r\n    this.backendSrv = backendSrv;\r\n    this.dashboard = $scope.ctrl.dashboard;\r\n\r\n    console.log(this.dashboard);\r\n\r\n    $scope.thresholds = [];\r\n\r\n    this.getConfig(config => {\r\n      console.log(config);\r\n      let url = config.jsonData.analyticEngineURL;\r\n      $http({\r\n        method: 'GET',\r\n        url: `${url}/pattern/threshold`\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n\r\n        // TODO: for now we only handle threshold with one pattern inside. Note,\r\n        //       a single threshold pattern can hold many threshold inside. Refactor?\r\n        $scope.thresholds = response.data.map(threshold => {\r\n          return threshold.pattern[0];\r\n        });\r\n      }, function errorCallback(response) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        // todo: Use grafana toast thing to report error.\r\n        console.log(response);\r\n      });\r\n    });\r\n  }\r\n\r\n  getConfig(cb) {\r\n    this.backendSrv.get('api/plugins/analytic-engine-app/settings').then(function(config) {\r\n      cb(config);\r\n    });\r\n  }\r\n}\r\nExampleAppPanelCtrl.template = '<h2 class=\"analytic-engine-app-heading\"></h2>' +\r\n  '<threshold-patterns data-thresholds=\"thresholds\"></threshold-patterns>';\r\n\r\nexport {\r\n  ExampleAppPanelCtrl as PanelCtrl\r\n};\r\n\r\n"]}