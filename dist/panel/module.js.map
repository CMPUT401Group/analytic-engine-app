{"version":3,"sources":["../../src/panel/module.js"],"names":["PanelCtrl","ExampleAppPanelCtrl","$scope","$injector","$http","backendSrv","metricResults","name","value","getConfig","console","log","config","url","jsonData","analyticEngineURL","method","then","successCallback","response","errorCallback","cb","get","results","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;2BAKFC,mB;;;AAEJ,qCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,UAAtC,EAAkD;AAAA;;AAAA,gJAC1CH,MAD0C,EAClCC,SADkC,EACvBC,KADuB,EAChBC,UADgB;;AAGhD,gBAAKA,UAAL,GAAkBA,UAAlB;;AAEAH,iBAAOI,aAAP,GAAuB,CACrB,EAAEC,MAAM,UAAR,EAAoBC,OAAO,EAA3B,EADqB,EAErB,EAAED,MAAM,UAAR,EAAoBC,OAAO,EAA3B,EAFqB,EAGrB,EAAED,MAAM,UAAR,EAAoBC,OAAO,EAA3B,EAHqB,CAAvB;;AAMA,gBAAKC,SAAL,CAAe,kBAAU;AACvBC,oBAAQC,GAAR,CAAYC,MAAZ;AACA,gBAAIC,MAAMD,OAAOE,QAAP,CAAgBC,iBAA1B;AACAX,kBAAM;AACJY,sBAAQ,KADJ;AAEJH,mBAAQA,GAAR;AAFI,aAAN,EAGGI,IAHH,CAGQ,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AACzC;AACA;AACAT,sBAAQC,GAAR,CAAYQ,QAAZ;AACD,aAPD,EAOG,SAASC,aAAT,CAAuBD,QAAvB,EAAiC;AAClC;AACA;AACAT,sBAAQC,GAAR,CAAYQ,QAAZ;AACD,aAXD;AAYD,WAfD;AAXgD;AA2BjD;;;;oCACSE,E,EAAI;AACZ,iBAAKhB,UAAL,CAAgBiB,GAAhB,CAAoB,0CAApB,EAAgEL,IAAhE,CAAqE,UAASM,OAAT,EAAkB;AACrFF,iBAAGE,OAAH;AACD,aAFD;AAGD;;;;QAlC+BvB,S;;AAoClCC,0BAAoBuB,QAApB,GAA+B,kDAC7B,2DADF;;2BAIEvB,mB","file":"module.js","sourcesContent":["import {PanelCtrl} from  'app/plugins/sdk';\n\nimport '../css/example-app.css!'\nimport '../directives/metric-results';\n\nclass ExampleAppPanelCtrl extends PanelCtrl {\n\n  constructor($scope, $injector, $http, backendSrv) {\n    super($scope, $injector, $http, backendSrv);\n\n    this.backendSrv = backendSrv;\n\n    $scope.metricResults = [\n      { name: 'metric-1', value: 23 },\n      { name: 'metric-2', value: 45 },\n      { name: 'metric-3', value: 66 }\n    ];\n\n    this.getConfig(config => {\n      console.log(config);\n      let url = config.jsonData.analyticEngineURL;\n      $http({\n        method: 'GET',\n        url: `${url}/analytic-engine/pattern/threshold`\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        console.log(response);\n      }, function errorCallback(response) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        console.log(response);\n      });\n    });\n  }\n  getConfig(cb) {\n    this.backendSrv.get('api/plugins/analytic-engine-app/settings').then(function(results) {\n      cb(results);\n    });\n  }\n}\nExampleAppPanelCtrl.template = '<h2 class=\"analytic-engine-app-heading\"></h2>' +\n  '<metric-results results=\"metricResults\"></metric-results>';\n\nexport {\n  ExampleAppPanelCtrl as PanelCtrl\n};\n\n"]}