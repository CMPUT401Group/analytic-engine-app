{"version":3,"sources":["../../src/components/threshold.js"],"names":["Utility","thresholdResultUrl","ThresholdPageCtrl","$scope","$injector","$http","$log","backendSrv","metricname","from","Date","to","thresholds","getConfig","url","config","jsonData","analyticEngineURL","method","then","response","data","map","threshold","pattern","params","objToURLParam","console","log","cb","get","templateUrl"],"mappings":";;;;;;;;;;;;;;;AAAOA,a;;;;;;;;;;;;;;;;;;;;;AAEHC,wB,GAAqB,mD;;mCAEnBC,iB;AACJ,mCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,IAAtC,EAA4CC,UAA5C,EAAwD;AAAA;;AACtD,eAAKJ,MAAL,GAAcA,MAAd;AACA,eAAKE,KAAL,GAAaA,KAAb;AACA,eAAKC,IAAL,GAAYA,IAAZ;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,UAAL,GAAgB,EAAhB;AACA,eAAKC,IAAL,GAAY,IAAIC,IAAJ,EAAZ;AACA,eAAKC,EAAL,GAAU,IAAID,IAAJ,EAAV;AACA,eAAKE,UAAL,GAAkB,EAAlB;AAED;;;;4CAEiB;AAAA;;AAChB,iBAAKC,SAAL,CAAe,kBAAU;AACvB,kBAAIC,MAAMC,OAAOC,QAAP,CAAgBC,iBAA1B;AACA,oBAAKZ,KAAL,CAAW;AACTa,wBAAQ,KADC;AAETJ,qBAAQA,GAAR;AAFS,eAAX,EAGGK,IAHH,CAGQ,oBAAY;AAClB;AACA;AACA,sBAAKP,UAAL,GAAkBQ,SAASC,IAAT,CAAcC,GAAd,CAAkB,qBAAa;AAC/CC,8BAAYA,UAAUC,OAAV,CAAkB,CAAlB,CAAZ;AACA,sBAAIC,SAASzB,QAAQ0B,aAAR,CAAsBH,SAAtB,CAAb;AACAA,4BAAUT,GAAV,GAAmBb,kBAAnB,SAAyCwB,MAAzC;AACA,yBAAOF,SAAP;AACD,iBALiB,CAAlB;AAMD,eAZD,EAYG,oBAAY;AACb;AACAI,wBAAQC,GAAR,CAAYR,QAAZ;AACD,eAfD;AAgBD,aAlBD;AAmBD;;;oCAESS,E,EAAI;AACZ,iBAAKtB,UAAL,CAAgBuB,GAAhB,CAAoB,0CAApB,EAAgEX,IAAhE,CAAqE,UAASJ,MAAT,EAAiB;AACpFc,iBAAGd,MAAH;AACD,aAFD;AAGD;;;;;;AAGHb,wBAAkB6B,WAAlB,GAAgC,2BAAhC;;mCACO7B,iB","file":"threshold.js","sourcesContent":["import Utility from \"../utility\";\r\n\r\nlet thresholdResultUrl = '/plugins/analytic-engine-app/page/thresholdresult';\r\n\r\nclass ThresholdPageCtrl {\r\n  constructor($scope, $injector, $http, $log, backendSrv) {\r\n    this.$scope = $scope;\r\n    this.$http = $http;\r\n    this.$log = $log;\r\n    this.backendSrv = backendSrv;\r\n    this.metricname=\"\";\r\n    this.from = new Date();\r\n    this.to = new Date();\r\n    this.thresholds = [];\r\n\r\n  }\r\n\r\n  updateThreshold() {\r\n    this.getConfig(config => {\r\n      let url = config.jsonData.analyticEngineURL;\r\n      this.$http({\r\n        method: 'GET',\r\n        url: `${url}/pattern/threshold`\r\n      }).then(response => {\r\n        // TODO: for now we only handle threshold with one pattern inside. Note,\r\n        //       a single threshold pattern can hold many threshold inside. Refactor?\r\n        this.thresholds = response.data.map(threshold => {\r\n          threshold = threshold.pattern[0];\r\n          let params = Utility.objToURLParam(threshold);\r\n          threshold.url = `${thresholdResultUrl}?${params}`;\r\n          return threshold;\r\n        });\r\n      }, response => {\r\n        // todo: Use grafana toast thing to report error.\r\n        console.log(response);\r\n      });\r\n    });\r\n  }\r\n\r\n  getConfig(cb) {\r\n    this.backendSrv.get('api/plugins/analytic-engine-app/settings').then(function(config) {\r\n      cb(config);\r\n    });\r\n  }\r\n}\r\n\r\nThresholdPageCtrl.templateUrl = 'components/threshold.html';\r\nexport{ThresholdPageCtrl};\r\n"]}